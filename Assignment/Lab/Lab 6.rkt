#reader(lib"read.ss""wxme")WXME0108 ## 
#|
   This file uses the GRacket editor format.
   Open this file in DrRacket version 7.0 or later to read it.

   Most likely, it was created by saving a program in DrRacket,
   and it probably contains a program with non-text elements
   (such as images or comment boxes).

            http://racket-lang.org/
|#
 34 7 #"wxtext\0"
3 1 6 #"wxtab\0"
1 1 8 #"wximage\0"
2 0 8 #"wxmedia\0"
4 1 34 #"(lib \"syntax-browser.ss\" \"mrlib\")\0"
1 0 36 #"(lib \"cache-image-snip.ss\" \"mrlib\")\0"
1 0 68
(
 #"((lib \"image-core.ss\" \"mrlib\") (lib \"image-core-wxme.rkt\" \"mr"
 #"lib\"))\0"
) 1 0 16 #"drscheme:number\0"
3 0 44 #"(lib \"number-snip.ss\" \"drscheme\" \"private\")\0"
1 0 36 #"(lib \"comment-snip.ss\" \"framework\")\0"
1 0 93
(
 #"((lib \"collapsed-snipclass.ss\" \"framework\") (lib \"collapsed-sni"
 #"pclass-wxme.ss\" \"framework\"))\0"
) 0 0 43 #"(lib \"collapsed-snipclass.ss\" \"framework\")\0"
0 0 19 #"drscheme:sexp-snip\0"
0 0 29 #"drscheme:bindings-snipclass%\0"
1 0 101
(
 #"((lib \"ellipsis-snip.rkt\" \"drracket\" \"private\") (lib \"ellipsi"
 #"s-snip-wxme.rkt\" \"drracket\" \"private\"))\0"
) 2 0 88
(
 #"((lib \"pict-snip.rkt\" \"drracket\" \"private\") (lib \"pict-snip.r"
 #"kt\" \"drracket\" \"private\"))\0"
) 0 0 55
#"((lib \"snip.rkt\" \"pict\") (lib \"snip-wxme.rkt\" \"pict\"))\0"
1 0 34 #"(lib \"bullet-snip.rkt\" \"browser\")\0"
0 0 25 #"(lib \"matrix.ss\" \"htdp\")\0"
1 0 22 #"drscheme:lambda-snip%\0"
1 0 29 #"drclickable-string-snipclass\0"
0 0 26 #"drracket:spacer-snipclass\0"
0 0 57
#"(lib \"hrule-snip.rkt\" \"macro-debugger\" \"syntax-browser\")\0"
1 0 26 #"drscheme:pict-value-snip%\0"
0 0 45 #"(lib \"image-snipr.ss\" \"slideshow\" \"private\")\0"
1 0 38 #"(lib \"pict-snipclass.ss\" \"slideshow\")\0"
2 0 55 #"(lib \"vertical-separator-snip.ss\" \"stepper\" \"private\")\0"
1 0 18 #"drscheme:xml-snip\0"
1 0 31 #"(lib \"xml-snipclass.ss\" \"xml\")\0"
1 0 21 #"drscheme:scheme-snip\0"
2 0 34 #"(lib \"scheme-snipclass.ss\" \"xml\")\0"
1 0 72
(
 #"((lib \"private/editor.rkt\" \"video\") (lib \"private/editor.rkt\" "
 #"\"video\"))\0"
) 0 0 10 #"text-box%\0"
1 0 32 #"(lib \"text-snipclass.ss\" \"xml\")\0"
1 0 1 6 #"wxloc\0"
          0 0 68 0 1 #"\0"
0 75 1 #"\0"
0 12 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 0 9
#"Standard\0"
0 75 6 #"Menlo\0"
0 12 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1 1 1 1 1 1 0 0 0 0 0 0 -1 -1 2 24
#"framework:default-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 15
#"text:ports out\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 255 0 0 0 0 0 -1
-1 2 15 #"text:ports err\0"
0 -1 1 #"\0"
1 0 -1 -1 93 -1 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 17
#"text:ports value\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 27 #"Matching Parenthesis Style\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:symbol\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 38
#"framework:syntax-color:scheme:keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2
38 #"framework:syntax-color:scheme:comment\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:string\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 35
#"framework:syntax-color:scheme:text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 39
#"framework:syntax-color:scheme:constant\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 49
#"framework:syntax-color:scheme:hash-colon-keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 42
#"framework:syntax-color:scheme:parenthesis\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:error\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:other\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 16
#"Misspelled Text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2
38 #"drracket:check-syntax:lexically-bound\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 28
#"drracket:check-syntax:set!d\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 37
#"drracket:check-syntax:unused-require\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"drracket:check-syntax:free-variable\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 31
#"drracket:check-syntax:imported\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 47
#"drracket:check-syntax:my-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 50
#"drracket:check-syntax:their-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 48
#"drracket:check-syntax:unk-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
49 #"drracket:check-syntax:both-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
26 #"plt:htdp:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 2 27
#"plt:htdp:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 4 1
#"\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 4 #"XML\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 37 #"plt:module-language:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 38
#"plt:module-language:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 4 1
#"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 100 0 0 0 0 -1
-1 2 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 100 0 0 0 0 -1
-1 24 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 255 255 255 -1 -1
15 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 255 255 255 -1 -1
14 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 255 255 255 -1 -1
17 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 255 255 255 -1 -1
44 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 255 255 255 -1 -1
46 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 255 255 255 -1 -1
4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 255 255 255 -1 -1
2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 65 105 225 0 0 0
-1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 255 255 0 -1 -1 0
1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
0 -1           0 1275 0 4 3 85
(
 #";; The first three lines of this file were inserted by DrRacket. The"
 #"y record metadata"
) 0 0 4 29 1 #"\n"
0 0 4 3 85
(
 #";; about the language level of this file in a form that our tools ca"
 #"n easily process."
) 0 0 4 29 1 #"\n"
0 0 4 3 83
(
 #"#reader(lib \"htdp-intermediate-reader.ss\" \"lang\")((modname |Lab "
 #"6|) (read-case-sens"
) 0 0 4 3 254
(
 #"itive #t) (teachpacks ((lib \"image.rkt\" \"teachpack\" \"2htdp\") ("
 #"lib \"universe.rkt\" \"teachpack\" \"2htdp\"))) (htdp-settings #(#t "
 #"constructor repeating-decimal #f #t none #f ((lib \"image.rkt\" \"te"
 #"achpack\" \"2htdp\") (lib \"universe.rkt\" \"teachpack\" \"2htdp\"))"
 #" #f)))"
) 0 0 4 29 1 #"\n"
0 0 17 3 54 #"; A FIAS (Finite Increasing Arithmetic Sequence) is a:"
0 0 24 29 1 #"\n"
0 0 17 3 36 #"; (make-fias Number Number Positive)"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 13 #"define-struct"
0 0 24 3 1 #" "
0 0 14 3 4 #"fias"
0 0 24 3 2 #" ["
0 0 14 3 3 #"min"
0 0 24 3 1 #" "
0 0 14 3 3 #"max"
0 0 24 3 1 #" "
0 0 14 3 4 #"step"
0 0 24 3 2 #"])"
0 0 24 29 1 #"\n"
0 0 17 3 55 #"; where (make-fias min max step) represents all numbers"
0 0 24 29 1 #"\n"
0 0 17 3 54 #"; of the form min+k*step, where k is a natural number,"
0 0 24 29 1 #"\n"
0 0 17 3 29 #"; such that min+k*step < max."
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 10 #"FIAS-EMPTY"
0 0 24 3 2 #" ("
0 0 14 3 9 #"make-fias"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 4 #"0.25"
0 0 24 3 3 #")) "
0 0 17 3 31 #"; empty sequence, as min >= max"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 6 #"FIAS-1"
0 0 24 3 2 #" ("
0 0 14 3 9 #"make-fias"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 4 #"0.25"
0 0 24 3 3 #")) "
0 0 17 3 46 #"; sequence with the elements (0, .25, .5, .75)"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 6 #"FIAS-2"
0 0 24 3 2 #" ("
0 0 14 3 9 #"make-fias"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #" "
0 0 21 3 4 #"0.25"
0 0 24 3 3 #")) "
0 0 17 3 49 #"; sequence with the elements (1, 1.25, 1.5, 1.75)"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 6 #"FIAS-3"
0 0 24 3 2 #" ("
0 0 14 3 9 #"make-fias"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 2 #"14"
0 0 24 3 1 #" "
0 0 21 3 1 #"4"
0 0 24 3 3 #")) "
0 0 17 3 42 #"; sequence with the elements (1, 5, 9, 13)"
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 17 3 23 #"; fias-temp : FIAS -> ?"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 11 #"fias-temp-0"
0 0 24 3 1 #" "
0 0 14 3 4 #"fias"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 3 #"..."
0 0 24 3 2 #" ("
0 0 14 3 8 #"fias-min"
0 0 24 3 1 #" "
0 0 14 3 4 #"fias"
0 0 24 3 3 #") ("
0 0 14 3 8 #"fias-max"
0 0 24 3 1 #" "
0 0 14 3 4 #"fias"
0 0 24 3 3 #") ("
0 0 14 3 9 #"fias-step"
0 0 24 3 1 #" "
0 0 14 3 4 #"fias"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 13 #";; Exercise 1"
0 0 24 29 1 #"\n"
0 0 17 3 32 #";; fias-empty? : FIAS -> Boolean"
0 0 24 29 1 #"\n"
0 0 17 3 32 #";; determines if a FIAS is empty"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 11 #"fias-empty?"
0 0 24 3 1 #" "
0 0 14 3 10 #"FIAS-EMPTY"
0 0 24 3 2 #") "
0 0 21 3 5 #"#true"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 11 #"fias-empty?"
0 0 24 3 1 #" "
0 0 14 3 6 #"FIAS-1"
0 0 24 3 2 #") "
0 0 21 3 6 #"#false"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 11 #"fias-empty?"
0 0 24 3 1 #" "
0 0 14 3 4 #"fias"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 2 #">="
0 0 24 3 2 #" ("
0 0 14 3 8 #"fias-min"
0 0 24 3 1 #" "
0 0 14 3 4 #"fias"
0 0 24 3 3 #") ("
0 0 14 3 8 #"fias-max"
0 0 24 3 1 #" "
0 0 14 3 4 #"fias"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 13 #";; Exercise 2"
0 0 24 29 1 #"\n"
0 0 17 3 31 #";; next-sequence : FIAS -> FIAS"
0 0 24 29 1 #"\n"
0 0 17 3 65
#";; takes a FIAS and returns a new FIAS with the same max and step"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 13 #"next-sequence"
0 0 24 3 1 #" "
0 0 14 3 10 #"FIAS-EMPTY"
0 0 24 3 3 #") ("
0 0 14 3 9 #"make-fias"
0 0 24 3 1 #" "
0 0 21 3 4 #"1.25"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 4 #"0.25"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 13 #"next-sequence"
0 0 24 3 1 #" "
0 0 14 3 6 #"FIAS-1"
0 0 24 3 3 #") ("
0 0 14 3 9 #"make-fias"
0 0 24 3 1 #" "
0 0 21 3 4 #"0.25"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 4 #"0.25"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 13 #"next-sequence"
0 0 24 3 1 #" "
0 0 14 3 4 #"fias"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 9 #"make-fias"
0 0 24 3 2 #" ("
0 0 14 3 1 #"+"
0 0 24 3 2 #" ("
0 0 14 3 8 #"fias-min"
0 0 24 3 1 #" "
0 0 14 3 4 #"fias"
0 0 24 3 3 #") ("
0 0 14 3 9 #"fias-step"
0 0 24 3 1 #" "
0 0 14 3 4 #"fias"
0 0 24 3 4 #")) ("
0 0 14 3 8 #"fias-max"
0 0 24 3 1 #" "
0 0 14 3 4 #"fias"
0 0 24 3 3 #") ("
0 0 14 3 9 #"fias-step"
0 0 24 3 1 #" "
0 0 14 3 4 #"fias"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 13 #";; Exercise 3"
0 0 24 29 1 #"\n"
0 0 17 3 93
(
 #";; You may have noticed that next-sequence returns the rest of a FIA"
 #"S, empty-fias? determines"
) 0 0 24 29 1 #"\n"
0 0 17 3 97
(
 #";; if it is empty, and that if it is non-empty fias-min is the first"
 #" element in it. Redefine your"
) 0 0 24 29 1 #"\n"
0 0 17 3 59
#";; fias-temp to take advantage of this recursive structure."
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 9 #"fias-temp"
0 0 24 3 1 #" "
0 0 14 3 4 #"fias"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 11 #"fias-empty?"
0 0 24 3 1 #" "
0 0 14 3 4 #"fias"
0 0 24 3 3 #") ("
0 0 14 3 3 #"..."
0 0 24 3 2 #" ("
0 0 14 3 8 #"fias-min"
0 0 24 3 1 #" "
0 0 14 3 4 #"fias"
0 0 24 3 2 #") "
0 0 14 3 3 #"..."
0 0 24 29 1 #"\n"
0 0 24 3 30 #"                             ("
0 0 14 3 8 #"fias-max"
0 0 24 3 1 #" "
0 0 14 3 4 #"fias"
0 0 24 3 1 #")"
0 0 14 3 3 #"..."
0 0 24 29 1 #"\n"
0 0 24 3 30 #"                             ("
0 0 14 3 9 #"fias-step"
0 0 24 3 1 #" "
0 0 14 3 4 #"fias"
0 0 24 3 2 #") "
0 0 14 3 3 #"..."
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ["
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 3 #"..."
0 0 24 3 2 #" ("
0 0 14 3 8 #"fias-min"
0 0 24 3 1 #" "
0 0 14 3 4 #"fias"
0 0 24 3 2 #") "
0 0 14 3 3 #"..."
0 0 24 3 2 #" ("
0 0 14 3 9 #"fias-temp"
0 0 24 3 2 #" ("
0 0 14 3 13 #"next-sequence"
0 0 24 3 1 #" "
0 0 14 3 4 #"fias"
0 0 24 3 3 #")) "
0 0 14 3 3 #"..."
0 0 24 3 5 #" )]))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 13 #";; Exercise 4"
0 0 24 29 1 #"\n"
0 0 17 3 28 #";; fias-sum : FIAS -> Number"
0 0 24 29 1 #"\n"
0 0 17 3 30 #";; sums the elements of a FIAS"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 8 #"fias-sum"
0 0 24 3 1 #" "
0 0 14 3 10 #"FIAS-EMPTY"
0 0 24 3 2 #") "
0 0 21 3 1 #"0"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 8 #"fias-sum"
0 0 24 3 1 #" "
0 0 14 3 6 #"FIAS-1"
0 0 24 3 2 #") "
0 0 21 3 3 #"1.5"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 8 #"fias-sum"
0 0 24 3 1 #" "
0 0 14 3 6 #"FIAS-2"
0 0 24 3 2 #") "
0 0 21 3 3 #"5.5"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 8 #"fias-sum"
0 0 24 3 1 #" "
0 0 14 3 4 #"fias"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 11 #"fias-empty?"
0 0 24 3 1 #" "
0 0 14 3 4 #"fias"
0 0 24 3 2 #") "
0 0 21 3 1 #"0"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ["
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 1 #"+"
0 0 24 3 2 #" ("
0 0 14 3 8 #"fias-min"
0 0 24 3 1 #" "
0 0 14 3 4 #"fias"
0 0 24 3 2 #") "
0 0 24 29 1 #"\n"
0 0 24 3 14 #"             ("
0 0 14 3 8 #"fias-sum"
0 0 24 3 2 #" ("
0 0 14 3 13 #"next-sequence"
0 0 24 3 1 #" "
0 0 14 3 4 #"fias"
0 0 24 3 6 #")))]))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 13 #";; Exercise 5"
0 0 24 29 1 #"\n"
0 0 17 3 33 #";; multiply-fias : FIAS -> Number"
0 0 24 29 1 #"\n"
0 0 17 3 36 #";; multiplies the elements of a FIAS"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 13 #"multiply-fias"
0 0 24 3 1 #" "
0 0 14 3 10 #"FIAS-EMPTY"
0 0 24 3 2 #") "
0 0 21 3 1 #"1"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 13 #"multiply-fias"
0 0 24 3 1 #" "
0 0 14 3 6 #"FIAS-1"
0 0 24 3 2 #") "
0 0 21 3 1 #"0"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 13 #"multiply-fias"
0 0 24 3 1 #" "
0 0 14 3 6 #"FIAS-2"
0 0 24 3 2 #") "
0 0 21 3 7 #"3.28125"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 13 #"multiply-fias"
0 0 24 3 1 #" "
0 0 14 3 4 #"fias"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 11 #"fias-empty?"
0 0 24 3 1 #" "
0 0 14 3 4 #"fias"
0 0 24 3 2 #") "
0 0 21 3 1 #"1"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ["
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 1 #"*"
0 0 24 3 2 #" ("
0 0 14 3 8 #"fias-min"
0 0 24 3 1 #" "
0 0 14 3 4 #"fias"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"             ("
0 0 14 3 13 #"multiply-fias"
0 0 24 3 2 #" ("
0 0 14 3 13 #"next-sequence"
0 0 24 3 1 #" "
0 0 14 3 4 #"fias"
0 0 24 3 6 #")))]))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 13 #";; Exercise 6"
0 0 24 29 1 #"\n"
0 0 17 3 39 #";; list-fias : FIAS -> [Listof Numbers]"
0 0 24 29 1 #"\n"
0 0 17 3 32 #";; lists the elements of a FIAS."
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 9 #"list-fias"
0 0 24 3 1 #" "
0 0 14 3 10 #"FIAS-EMPTY"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 24 3 3 #"())"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 9 #"list-fias"
0 0 24 3 1 #" "
0 0 14 3 6 #"FIAS-1"
0 0 24 3 3 #") ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 8          10 21 4 #"1/4\0"
1 #"\0"
8 #"decimal\0"
2 #"1\0"
0 0 24 3 1 #" "
0 8          10 21 4 #"1/2\0"
1 #"\0"
8 #"decimal\0"
2 #"1\0"
0 0 24 3 1 #" "
0 8          10 21 4 #"3/4\0"
1 #"\0"
8 #"decimal\0"
2 #"1\0"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 9 #"list-fias"
0 0 24 3 1 #" "
0 0 14 3 2 #"fi"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 11 #"fias-empty?"
0 0 24 3 1 #" "
0 0 14 3 2 #"fi"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 24 3 3 #"()]"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ["
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 8 #"fias-min"
0 0 24 3 1 #" "
0 0 14 3 2 #"fi"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 9 #"list-fias"
0 0 24 3 2 #" ("
0 0 14 3 13 #"next-sequence"
0 0 24 3 1 #" "
0 0 14 3 2 #"fi"
0 0 24 3 6 #")))]))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 13 #";; Exercise 7"
0 0 24 29 1 #"\n"
0 0 17 3 59
#";; fias-abstract : FIAS [Number -> Number] Number -> Number"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 13 #"fias-abstract"
0 0 24 3 1 #" "
0 0 14 3 4 #"fias"
0 0 24 3 1 #" "
0 0 14 3 4 #"func"
0 0 24 3 1 #" "
0 0 14 3 4 #"base"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 11 #"fias-empty?"
0 0 24 3 1 #" "
0 0 14 3 4 #"fias"
0 0 24 3 2 #") "
0 0 14 3 4 #"base"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ["
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 4 #"func"
0 0 24 3 2 #" ("
0 0 14 3 8 #"fias-min"
0 0 24 3 1 #" "
0 0 14 3 4 #"fias"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 13 #"fias-abstract"
0 0 24 3 2 #" ("
0 0 14 3 13 #"next-sequence"
0 0 24 3 1 #" "
0 0 14 3 4 #"fias"
0 0 24 3 2 #") "
0 0 14 3 4 #"func"
0 0 24 3 1 #" "
0 0 14 3 4 #"base"
0 0 24 3 5 #"))]))"
0 0 24 29 1 #"\n"
0 0 17 3 30 #";; fias-sum.2 : FIAS -> Number"
0 0 24 29 1 #"\n"
0 0 17 3 30 #";; sums the elements of a FIAS"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 10 #"fias-sum.2"
0 0 24 3 1 #" "
0 0 14 3 10 #"FIAS-EMPTY"
0 0 24 3 2 #") "
0 0 21 3 1 #"0"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 10 #"fias-sum.2"
0 0 24 3 1 #" "
0 0 14 3 6 #"FIAS-1"
0 0 24 3 2 #") "
0 0 21 3 3 #"1.5"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 10 #"fias-sum.2"
0 0 24 3 1 #" "
0 0 14 3 6 #"FIAS-2"
0 0 24 3 2 #") "
0 0 21 3 3 #"5.5"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 10 #"fias-sum.2"
0 0 24 3 1 #" "
0 0 14 3 1 #"f"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 13 #"fias-abstract"
0 0 24 3 1 #" "
0 0 14 3 1 #"f"
0 0 24 3 1 #" "
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 17 3 35 #";; multiply-fias.2 : FIAS -> Number"
0 0 24 29 1 #"\n"
0 0 17 3 36 #";; multiplies the elements of a FIAS"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 15 #"multiply-fias.2"
0 0 24 3 1 #" "
0 0 14 3 10 #"FIAS-EMPTY"
0 0 24 3 2 #") "
0 0 21 3 1 #"1"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 15 #"multiply-fias.2"
0 0 24 3 1 #" "
0 0 14 3 6 #"FIAS-1"
0 0 24 3 2 #") "
0 0 21 3 1 #"0"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 15 #"multiply-fias.2"
0 0 24 3 1 #" "
0 0 14 3 6 #"FIAS-2"
0 0 24 3 2 #") "
0 0 21 3 7 #"3.28125"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 15 #"multiply-fias.2"
0 0 24 3 1 #" "
0 0 14 3 1 #"f"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 13 #"fias-abstract"
0 0 24 3 1 #" "
0 0 14 3 1 #"f"
0 0 24 3 1 #" "
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 17 3 41 #";; list-fias.2 : FIAS -> [Listof Numbers]"
0 0 24 29 1 #"\n"
0 0 17 3 32 #";; lists the elements of a FIAS."
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 11 #"list-fias.2"
0 0 24 3 1 #" "
0 0 14 3 10 #"FIAS-EMPTY"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 24 3 3 #"())"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 11 #"list-fias.2"
0 0 24 3 1 #" "
0 0 14 3 6 #"FIAS-1"
0 0 24 3 3 #") ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 8          10 21 4 #"1/4\0"
1 #"\0"
8 #"decimal\0"
2 #"1\0"
0 0 24 3 1 #" "
0 8          10 21 4 #"1/2\0"
1 #"\0"
8 #"decimal\0"
2 #"1\0"
0 0 24 3 1 #" "
0 8          10 21 4 #"3/4\0"
1 #"\0"
8 #"decimal\0"
2 #"1\0"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 11 #"list-fias.2"
0 0 24 3 1 #" "
0 0 14 3 1 #"f"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 13 #"fias-abstract"
0 0 24 3 1 #" "
0 0 14 3 1 #"f"
0 0 24 3 1 #" "
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 4 #"()))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 13 #";; Exercise 8"
0 0 24 29 1 #"\n"
0 0 17 3 41 #";; fias-perfect-square? : FIAS -> Boolean"
0 0 24 29 1 #"\n"
0 0 17 3 58
#";; determines if any element of a FIAS is a perfect square"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 20 #"fias-perfect-square?"
0 0 24 3 1 #" "
0 0 14 3 10 #"FIAS-EMPTY"
0 0 24 3 2 #") "
0 0 21 3 6 #"#false"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 20 #"fias-perfect-square?"
0 0 24 3 1 #" "
0 0 14 3 6 #"FIAS-1"
0 0 24 3 2 #") "
0 0 21 3 5 #"#true"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 20 #"fias-perfect-square?"
0 0 24 3 1 #" "
0 0 14 3 6 #"FIAS-2"
0 0 24 3 2 #") "
0 0 21 3 5 #"#true"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 20 #"fias-perfect-square?"
0 0 24 3 1 #" "
0 0 14 3 6 #"FIAS-3"
0 0 24 3 2 #") "
0 0 21 3 5 #"#true"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 20 #"fias-perfect-square?"
0 0 24 3 1 #" "
0 0 14 3 4 #"fias"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 11 #"fias-empty?"
0 0 24 3 1 #" "
0 0 14 3 4 #"fias"
0 0 24 3 2 #") "
0 0 21 3 6 #"#false"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ["
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 2 #"or"
0 0 24 3 2 #" ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 8 #"integer?"
0 0 24 3 2 #" ("
0 0 14 3 4 #"sqrt"
0 0 24 3 2 #" ("
0 0 14 3 8 #"fias-min"
0 0 24 3 1 #" "
0 0 14 3 4 #"fias"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                  "
0 0 21 3 5 #"#true"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                  "
0 0 21 3 6 #"#false"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 20 #"fias-perfect-square?"
0 0 24 3 2 #" ("
0 0 14 3 13 #"next-sequence"
0 0 24 3 1 #" "
0 0 14 3 4 #"fias"
0 0 24 3 6 #")))]))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 13 #";; Exercise 9"
0 0 24 29 1 #"\n"
0 0 17 3 31 #";; fias-even? : FIAS -> Boolean"
0 0 24 29 1 #"\n"
0 0 17 3 46 #";; determines if any element of a FIAS is even"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 10 #"fias-even?"
0 0 24 3 1 #" "
0 0 14 3 10 #"FIAS-EMPTY"
0 0 24 3 2 #") "
0 0 21 3 6 #"#false"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 10 #"fias-even?"
0 0 24 3 1 #" "
0 0 14 3 6 #"FIAS-1"
0 0 24 3 2 #") "
0 0 21 3 5 #"#true"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 10 #"fias-even?"
0 0 24 3 1 #" "
0 0 14 3 6 #"FIAS-2"
0 0 24 3 2 #") "
0 0 21 3 6 #"#false"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 10 #"fias-even?"
0 0 24 3 1 #" "
0 0 14 3 6 #"FIAS-3"
0 0 24 3 2 #") "
0 0 21 3 6 #"#false"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 10 #"fias-even?"
0 0 24 3 1 #" "
0 0 14 3 4 #"fias"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 11 #"fias-empty?"
0 0 24 3 1 #" "
0 0 14 3 4 #"fias"
0 0 24 3 2 #") "
0 0 21 3 6 #"#false"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ["
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 2 #"or"
0 0 24 3 2 #" ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 8 #"integer?"
0 0 24 3 2 #" ("
0 0 14 3 8 #"fias-min"
0 0 24 3 1 #" "
0 0 14 3 4 #"fias"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                  ("
0 0 14 3 5 #"even?"
0 0 24 3 2 #" ("
0 0 14 3 8 #"fias-min"
0 0 24 3 1 #" "
0 0 14 3 4 #"fias"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                  "
0 0 21 3 6 #"#false"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 10 #"fias-even?"
0 0 24 3 2 #" ("
0 0 14 3 13 #"next-sequence"
0 0 24 3 1 #" "
0 0 14 3 4 #"fias"
0 0 24 3 6 #")))]))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 14 #";; Exercise 10"
0 0 24 29 1 #"\n"
0 0 17 3 80
(
 #";; fias-abstract.2 : FIAS [Number -> Boolean] Boolean Boolean Boolea"
 #"n -> Boolean"
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 15 #"fias-abstract.2"
0 0 24 3 1 #" "
0 0 14 3 4 #"fias"
0 0 24 3 1 #" "
0 0 14 3 4 #"test"
0 0 24 3 1 #" "
0 0 14 3 10 #"base-empty"
0 0 24 3 1 #" "
0 0 14 3 9 #"base-true"
0 0 24 3 1 #" "
0 0 14 3 10 #"base-false"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 11 #"fias-empty?"
0 0 24 3 1 #" "
0 0 14 3 4 #"fias"
0 0 24 3 2 #") "
0 0 14 3 10 #"base-empty"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ["
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 2 #"or"
0 0 24 3 2 #" ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 8 #"fias-min"
0 0 24 3 1 #" "
0 0 14 3 4 #"fias"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                  "
0 0 14 3 9 #"base-true"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                  "
0 0 14 3 10 #"base-false"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 15 #"fias-abstract.2"
0 0 24 3 2 #" ("
0 0 14 3 13 #"next-sequence"
0 0 24 3 1 #" "
0 0 14 3 4 #"fias"
0 0 24 3 2 #") "
0 0 14 3 4 #"test"
0 0 24 3 1 #" "
0 0 14 3 10 #"base-empty"
0 0 24 3 1 #" "
0 0 14 3 9 #"base-true"
0 0 24 3 1 #" "
0 0 14 3 10 #"base-false"
0 0 24 3 5 #"))]))"
0 0 24 29 1 #"\n"
0 0 17 3 43 #";; fias-perfect-square?.2 : FIAS -> Boolean"
0 0 24 29 1 #"\n"
0 0 17 3 58
#";; determines if any element of a FIAS is a perfect square"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 22 #"fias-perfect-square?.2"
0 0 24 3 1 #" "
0 0 14 3 10 #"FIAS-EMPTY"
0 0 24 3 2 #") "
0 0 21 3 6 #"#false"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 22 #"fias-perfect-square?.2"
0 0 24 3 1 #" "
0 0 14 3 6 #"FIAS-1"
0 0 24 3 2 #") "
0 0 21 3 5 #"#true"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 22 #"fias-perfect-square?.2"
0 0 24 3 1 #" "
0 0 14 3 6 #"FIAS-2"
0 0 24 3 2 #") "
0 0 21 3 5 #"#true"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 22 #"fias-perfect-square?.2"
0 0 24 3 1 #" "
0 0 14 3 6 #"FIAS-3"
0 0 24 3 2 #") "
0 0 21 3 5 #"#true"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 22 #"fias-perfect-square?.2"
0 0 24 3 1 #" "
0 0 14 3 4 #"fias"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 15 #"fias-abstract.2"
0 0 24 3 1 #" "
0 0 14 3 4 #"fias"
0 0 24 3 1 #" "
0 0 14 3 26 #"check-fias-perfect-square?"
0 0 24 3 1 #" "
0 0 21 3 6 #"#false"
0 0 24 3 1 #" "
0 0 21 3 5 #"#true"
0 0 24 3 1 #" "
0 0 21 3 6 #"#false"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 17 3 49 #";; check-fias-perfect-square? : Number -> Boolean"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 26 #"check-fias-perfect-square?"
0 0 24 3 1 #" "
0 0 14 3 3 #"num"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 8 #"integer?"
0 0 24 3 2 #" ("
0 0 14 3 4 #"sqrt"
0 0 24 3 1 #" "
0 0 14 3 3 #"num"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 17 3 33 #";; fias-even?.2 : FIAS -> Boolean"
0 0 24 29 1 #"\n"
0 0 17 3 46 #";; determines if any element of a FIAS is even"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 12 #"fias-even?.2"
0 0 24 3 1 #" "
0 0 14 3 10 #"FIAS-EMPTY"
0 0 24 3 2 #") "
0 0 21 3 6 #"#false"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 12 #"fias-even?.2"
0 0 24 3 1 #" "
0 0 14 3 6 #"FIAS-1"
0 0 24 3 2 #") "
0 0 21 3 5 #"#true"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 12 #"fias-even?.2"
0 0 24 3 1 #" "
0 0 14 3 6 #"FIAS-2"
0 0 24 3 2 #") "
0 0 21 3 6 #"#false"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 12 #"fias-even?.2"
0 0 24 3 1 #" "
0 0 14 3 6 #"FIAS-3"
0 0 24 3 2 #") "
0 0 21 3 6 #"#false"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 12 #"fias-even?.2"
0 0 24 3 1 #" "
0 0 14 3 4 #"fias"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 15 #"fias-abstract.2"
0 0 24 3 1 #" "
0 0 14 3 4 #"fias"
0 0 24 3 1 #" "
0 0 14 3 8 #"integer?"
0 0 24 3 1 #" "
0 0 21 3 6 #"#false"
0 0 24 3 2 #" ("
0 0 14 3 5 #"even?"
0 0 24 3 2 #" ("
0 0 14 3 8 #"fias-min"
0 0 24 3 1 #" "
0 0 14 3 4 #"fias"
0 0 24 3 3 #")) "
0 0 21 3 6 #"#false"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 14 #";; Exercise 11"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 1 #"a"
0 0 24 3 1 #" "
0 0 14 3 8 #"supercut"
0 0 24 3 1 #" "
0 0 14 3 2 #"of"
0 0 24 3 1 #" "
0 0 14 3 2 #"us"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 14 3 2 #"of"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 6 #"empty?"
0 0 24 3 1 #" "
0 0 14 3 8 #"supercut"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 2 #"us"
0 0 24 3 1 #" "
0 0 21 3 2 #"#f"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 2 #"us"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 8 #"supercut"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 17 3 60
#";; a : (X) [List-of X] Number [Boolean -> Boolean] -> Number"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 3 #"the"
0 0 24 3 1 #" "
0 0 14 3 7 #"moments"
0 0 24 3 1 #" "
0 0 14 3 1 #"i"
0 0 24 3 1 #" "
0 0 14 3 4 #"play"
0 0 24 3 1 #" "
0 0 14 3 2 #"in"
0 0 24 3 1 #" "
0 0 14 3 3 #"the"
0 0 24 3 1 #" "
0 0 14 3 4 #"dark"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 4 #"play"
0 0 24 3 2 #" ("
0 0 14 3 2 #"in"
0 0 24 3 2 #" ("
0 0 14 3 4 #"play"
0 0 24 3 1 #" "
0 0 14 3 3 #"the"
0 0 24 3 1 #" "
0 0 14 3 4 #"dark"
0 0 24 3 4 #")) ("
0 0 14 3 4 #"play"
0 0 24 3 1 #" "
0 0 14 3 7 #"moments"
0 0 24 3 1 #" "
0 0 14 3 1 #"i"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 17 3 36 #";; the : (A B C D) A B [C D -> Any] "
0 0 24 29 1 #"\n"
0 0 17 3 38 #";; the outputs type is same as moments"
0 0 24 29 1 #"\n"
0 0 17 3 55 #";; in : takes two data whose type are what play outpus "
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 4 #"come"
0 0 24 3 1 #" "
0 0 14 3 4 #"home"
0 0 24 3 1 #" "
0 0 14 3 2 #"to"
0 0 24 3 1 #" "
0 0 14 3 2 #"my"
0 0 24 3 1 #" "
0 0 14 3 5 #"heart"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" [("
0 0 14 3 4 #"home"
0 0 24 3 1 #" "
0 0 14 3 2 #"my"
0 0 24 3 3 #") ("
0 0 14 3 2 #"to"
0 0 24 3 1 #" "
0 0 14 3 5 #"heart"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        [("
0 0 14 3 2 #"my"
0 0 24 3 1 #" "
0 0 14 3 5 #"heart"
0 0 24 3 2 #") "
0 0 19 3 3 #"\" \""
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ["
0 0 14 3 4 #"else"
0 0 24 3 1 #" "
0 0 19 3 2 #"\"\""
0 0 24 3 3 #"]))"
0 0 24 29 1 #"\n"
0 0 17 3 59
#";; come : (X Y) [X -> Boolean] [Y -> Boolean] X Y -> String"
0           0
