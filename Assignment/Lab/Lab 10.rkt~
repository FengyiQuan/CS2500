;; The first three lines of this file were inserted by DrRacket. They record metadata
;; about the language level of this file in a form that our tools can easily process.
#reader(lib "htdp-intermediate-reader.ss" "lang")((modname |Lab 10|) (read-case-sensitive #t) (teachpacks ((lib "image.rkt" "teachpack" "2htdp") (lib "universe.rkt" "teachpack" "2htdp"))) (htdp-settings #(#t constructor repeating-decimal #f #t none #f ((lib "image.rkt" "teachpack" "2htdp") (lib "universe.rkt" "teachpack" "2htdp")) #f)))
;; Lab 10
; A GameOfLife is a [List-of [List-of Boolean]]
; where the length of the outer list is the same as all of the inner lists
; and represents alive (#t) and dead (#f) cells
(define TINY-GAME
  (list (list #f #f #f #f)
        (list #f #t #t #f)
        (list #f #t #f #f)
        (list #f #f #f #f)))

;; Exercise (Reviewed) 1

; run with ""
(define CELL   20)
(define WIDTH  10)
(define HEIGHT 20)
(define-struct enemy (p c shootiness))
(define ENEMY-C (list "red" "blue" "green"))
(define-struct player (p c))
(define-struct world (baddies bad-bs good-bs p num))
(define INITIAL-ENEMIES (list (make-enemy (make-posn 0 3) "green" 0)
                              (make-enemy (make-posn 3 3) "red" .1)
                              (make-enemy (make-posn 6 3) "white" .2)
                              (make-enemy (make-posn 9 3) "blue" .5)
                              (make-enemy (make-posn 0 6) "orange" .5)
                              (make-enemy (make-posn 3 6) "yellow" .75)
                              (make-enemy (make-posn 6 6) "purple" 0)
                              (make-enemy (make-posn 9 6) "white" .5)))
(define COLORS (list "green" "red" "blue" "yellow" "purple" "white"))
(define (update-world w)
  (cond [(world? w) (update-world2 w)]
        [(string? w) w]))
(define (remove-bad-bs pw)
  (make-world (world-baddies pw)
              (remove-bs (world-bad-bs pw) (world-good-bs pw))
              (remove-bs (world-good-bs pw) (world-bad-bs pw))
              (world-p pw)
              (world-num pw)))
(define (remove-bs bs1 bs2)
  (local [(define (helper? b)
            (and (<= 0 (posn-x b) WIDTH)
                 (<= 0 (posn-y b) HEIGHT)))
          (define (helper2? b)
            (local [
                    (define (helper? b2)
                      (no-collision? b b2))]
              (andmap helper? bs2)))
          (define (helper3? b)
            (and (helper? b) (helper2? b)))]
    (filter helper3? bs1)))
(define (remove-collided bs enemies)
  (local [(define (helper? b)
            (local [(define (helper2? inv)
                      (no-collision? b (enemy-p inv)))]
              (andmap helper2? enemies)))]
    (filter helper? bs)))
(define (no-collision? p1 p2)
  (not (and (= (posn-x p1) (posn-x p2))
            (= (posn-y p1) (posn-y p2)))))
(define (move-bs pw)
  (make-world (world-baddies pw)
              (move-bs-by (world-bad-bs pw) 1)
              (move-bs-by (world-good-bs pw) 1)
              (world-p pw)
              (world-num pw)))
(define (move-bs-by bs change)
  (local [(define (helper b) (helper3 b change))]
    (map helper bs)))
(define (helper3 p change)
  (make-posn (posn-x p) (+ (posn-y p) change)))
(define (enemies-helper3 pw)
  (make-world (move-if-time (world-baddies pw) (world-num pw))
              (world-bad-bs pw)
              (world-good-bs pw)
              (world-p pw)
              (world-num pw)))
(define (move-if-time enemies t)
  (if (= 0 (modulo t 15))
      (move-all-enemies enemies)
      enemies))
(define (move-all-enemies enemies)
  (local [(define (helper inv)
            (make-enemy (helper3 (enemy-p inv) 1)
                        (enemy-c inv)
                        (enemy-shootiness inv)))]
    (map helper enemies)))
(define (shoot-bs pw)
  (make-world (world-baddies pw)
              (append (new-bs (world-baddies pw))(world-bad-bs pw))
              (world-good-bs pw)
              (world-p pw)
              (world-num pw)))
(define (new-bs enemies)
  (local [(define (helper inv bs)
            (if (helper2? inv)
                (cons (enemy-p inv) bs)
                bs))
          (define (helper2? inv)
            (< (/ (random 100) 100) (enemy-shootiness inv)))]
    (foldr helper '() enemies)))
(define (update-time pw)
  (make-world (world-baddies pw)
              (world-bad-bs pw)
              (world-good-bs pw)
              (world-p pw)
              (add1 (world-num pw))))
(define (enemies-helper2 pw)
  (make-world (append (new-enemies-if-time (world-num pw))
                      (world-baddies pw))
              (world-bad-bs pw)
              (world-good-bs pw)
              (world-p pw)
              (world-num pw)))
(define (new-enemies-if-time t)
  (if (zero? (modulo t 30))
      (build-list (random 5) random-new-enemy)
      '()))
(define (random-new-enemy _)
  (make-enemy (list-ref ENEMY-C
                        (random (length ENEMY-C)))
              (make-posn (random WIDTH) (random 3))
              (/ (random 100) 100)))
(define (handle-key w ke)
  (cond [(world? w) (world-handle-key w ke)]
        [(string? w) (menu-world-handle-key w ke)]))
(define (world-handle-key w ke)
  (cond [(string=? "left" ke) (move-player w 1)]
        [(string=? "right" ke) (move-player w -1)]
        [(string=? " " ke) (shoot-player-bullet w)]
        [else w]))
(define (move-player pw change)
  (make-world (world-baddies pw)
              (world-bad-bs pw)
              (world-good-bs pw)
              (move-player-by-amount (world-p pw) change)
              (world-num pw)))
(define (draw-world w)
  (cond [(world? w) (draw-world2 w)]
        [(string? w) (draw-menu-world w)]))
(define (move-player-by-amount p change)
  (if (player-can-move? p change)
      (make-player (+ (player-p p) change)
                   (player-c p))
      p))
(define (player-can-move? player change)
  (<= 0 (+ change (player-p player)) WIDTH))
(define (shoot-player-bullet pw)
  (make-world (world-baddies pw)
              (world-bad-bs pw)
              (cons (make-posn (player-p (world-p pw)) HEIGHT) (world-good-bs pw))
              (world-p pw)
              (world-num pw)))
(define (menu-world-handle-key w ke)
  (cond [(string=? "\r" ke) (check-valid-color w)]
        [(= 1 (string-length ke)) (string-append w ke)]
        [else w]))
(define (check-valid-color mw)
  (if (valid-color? mw)
      (make-world INITIAL-ENEMIES '() '() (make-player (/ WIDTH 2) mw) 1)
      ""))
(define (valid-color? mw)
  (member? mw COLORS))
(define (draw-world2 pw)
  (local [(define (draw-bs bs color bg)
            (local [(define (helper bullet img)
                      (place-image (square (/ CELL 2) "solid" color)
                                   (* CELL (posn-x bullet))
                                   (* CELL (posn-y bullet))
                                   img))]
              (foldr helper bg bs)))]
    (place-image (square CELL "solid" (player-c (world-p pw)))
                 (* CELL (player-p (world-p pw)))
                 (* CELL HEIGHT)
                 (draw-bs (world-good-bs pw)
                          "yellow"
                          (draw-bs (world-bad-bs pw)
                                   "red"
                                   (draw-enemies
                                    (world-baddies pw)
                                    (rectangle (* WIDTH CELL) (* HEIGHT CELL) "solid" "black")))))))
(define (draw-enemies enemies bg)
  (local [(define (helper inv img)
            (place-image (circle (/ CELL 2) "solid" (enemy-c inv))
                         (* CELL (posn-x (enemy-p inv)))
                         (* CELL (posn-y (enemy-p inv)))
                         img))]
    (foldr helper bg enemies)))
(define (update-world2 pw)
  (update-time
   (enemies-helper2
    (shoot-bs
     (enemies-helper3
      (move-bs
       (enemies-helper
        (remove-bad-bs pw))))))))
(define (draw-bs bs color bg)
  (local [(define (helper bullet img)
            (place-image (square (/ CELL 2) "solid" color)
                         (* CELL (posn-x bullet))
                         (* CELL (posn-y bullet))
                         img))]
    (foldr helper bg bs)))
 
(define (draw-menu-world mw)
  (overlay (above (text mw 24 "white")
                  (if (valid-color? mw)
                      (text "Hit enter and play!" 10 "white")
                      (if (string=? mw "")
                          (text "Type a color." 10 "white")
                          (text "Bad Color, Try Again" 10 "white"))))
           (rectangle (* WIDTH CELL) (* HEIGHT CELL) "solid" "black")))
(define (draw-error-message mw)
  (if (valid-color? mw)
      (text "Hit enter and play!" 10 "white")
      (if (string=? mw "")
          (text "Type a color." 10 "white")
          (text "Bad Color, Try Again" 10 "white"))))
(define (game-over? w)
  (cond [(world? w) (or (player-shot? (world-p w)
                                      (world-bad-bs w))
                        (empty? (world-baddies w)))]
        [(string? w) #f]))
(define (world-over? pw) #true)
(define (player-shot? player bad-bs)
  (local [(define (helper? b)
            (and (= (player-p player) (posn-x b))
                 (= HEIGHT (posn-y b))))]
    (ormap helper? bad-bs)))
(define (enemies-helper pw)
  (make-world (kill (world-baddies pw) (world-good-bs pw))
              (world-bad-bs pw)
              (remove-collided (world-good-bs pw) (world-baddies pw))
              (world-p pw)
              (world-num pw)))
(define (main w)
  (big-bang w
    [on-tick update-world .75]
    [on-key handle-key]
    [to-draw draw-world]
    [stop-when game-over?]))
(define (kill enemies bs)
  (local [(define (helper? inv)
            (local [(define (helper2? b)
                      (no-collision? b (enemy-p inv)))]
              (andmap helper2? bs)))]
    (filter helper? enemies)))