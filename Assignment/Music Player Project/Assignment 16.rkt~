;; The first three lines of this file were inserted by DrRacket. They record metadata
;; about the language level of this file in a form that our tools can easily process.
#reader(lib "htdp-intermediate-reader.ss" "lang")((modname |Assignment 16|) (read-case-sensitive #t) (teachpacks ((lib "image.rkt" "teachpack" "2htdp") (lib "universe.rkt" "teachpack" "2htdp"))) (htdp-settings #(#t constructor repeating-decimal #f #t none #f ((lib "image.rkt" "teachpack" "2htdp") (lib "universe.rkt" "teachpack" "2htdp")) #f)))
(require 2htdp/image)
(require 2htdp/universe)
(require neu-fall18)
(require 2htdp/batch-io)

#|------------- Song -------------|#
(define-struct song [id title artist byte-string])
;; A song is a (make-song Number String String String)
;; - where id is the song's id number
;; - the title is the song's title
;; - the artist is the song's artist
;; - byte-string is a byte string of this song
(define SONG (make-song 123456 "Light" "Rocket Girls" #"bytes"))
#; (define (song-temp s)
     (... (song-id s) ...
          (song-title s) ...
          (song-artist s) ...
          (song-byte-string s) ...))

#|------------- ClientMsg -------------|#
; A ClientMsg is a Nat
; representing a request for a SongMsg with a specific ID#
(define CMSG 0)

#|------------- ServerMsg -------------|#
;; An ErrorMsg is a (list "ERROR" String)
;; where the second string is the message from the server about what went wrong
(define EMSG (list "ERROR" "WRONG"))
#; (define (errormsg-temp emg)
     (... (first emg) ...
          (second emg) ...))

; A Metadata is a (list String String Number String)
; - where the first String is the song's title
; - the second String is the song's artist
; - the Number is the length of the song (in seconds)
; - and the third String is the song's album
(define METADATA-1 (list "Light" "Rocket Gilrs" 120 "No album"))
(define METADATA-2 (list "REALX" "Jack Yong" 123 "album"))
#; (define (mtdt-temp m)
     (... (first m) ...
          (second m) ...
          (third m) ...
          (fourth m) ...))
;; A SongMsg is a (list "SONG" Nat Metadata String)
;; - where the Nat is the song's unique ID#
;; - the Metadata is information about the song
;; - and the String is the actual byte-string of music
(define SMSG (list "SONG" 123456 METADATA-1 #"bytes"))
#; (define (songmsg-temp smg)
     (... (first smg) ...
          (second smg) ...
          (mtdt-temp (third smg)) ...
          (fourth smg) ...))

; A IDMetaPair is a (list Nat Metadata)
; - where the nat is the id of the song
; - and the metadata contains all of the metadata of the song
(define IDPAIR-1 (list 123456 METADATA-1))
(define IDPAIR-2 (list 654321 METADATA-2))
#; (define (idpair-temp idp)
     (... (first idp) ...
          (mtdt-temp (second idp)) ...))
;; A List-of-IDP is a [List-of IDMetaPair]
(define LOIDP (list IDPAIR-1 IDPAIR-2))
#; (define (loidp-temp lodip)
     (cond
       [(empty? lodip) ...]
       [(cons? lodip) ... (idpair-temp (first lodip))
                      (loidp-temp (rest lodip)) ...]))
; A MetadataMsg is a (list "METADATA" [List-of IDMetaPair])
; where the list contains all of the metadata and ids of the songs available on the server
(define MMSG (list "METADATA" LOIDP))
#; (define (metadatamsg-temp mmg)
     (... (first mmg) ...
          (loidp-temp (second mmg)) ...))

; A ServerMsg is one of:
; - ErrorMsg
; - SongMsg
; - MetadataMsg
(define SMSG-1 EMSG)
(define SMSG-2 SMSG)
(define SMSG-3 MMSG)

#|------------- Status -------------|#
;; Status is one of:
;; "Waiting for song data"
;; [List-of IDMetaPair]
;; "Requesting song"
;; Song
;; Examples:
(define STATUS-1 "Waiting for song data") ; just started the program and waiting for song data
(define STATUS-2 LOIDP) ;; client is choosing a song to play
(define STATUS-3 "Requesting song") ; requested a song but have not yet received one
(define STATUS-4 SONG) ; have received a song from the server
#; (define (status-temp s)
     (cond 
       [(and (string? s) (string=? "Waiting for song data" s)) ...]
       [(list? s) (loidp-temp s) ...]
       [(and (string? s) (string=? "Requesting song" s)) ...]
       [(song? s) (song-temp s) ...]))

#|------------- FeedbackString -------------|#
;; A FeedbackString is one of:
;; - "" (represents no song played yet)
;; - "dislike"
;; - "like"
;; - "none"
;; Examples:
(define BAD-FB DONT)
(define GOOD-FB LIKE)
(define NO-FB DONE)
#; (define (feedback-template fs)
     (cond [(string=? fs "") ...]
           [(string=? fs BAD-FB) ...]
           [(string=? fs GOOD-FB) ...]
           [(string=? fs NO-FB) ...]))

#|------------- History -------------|#
(define-struct 1song-history [id name plays])
;; A HO1S (History of one song) is a (make-1song-history Number String Nat)
;; where id number represents the id of a song
;; the name is the name of a song
;; the plays is the number of how many times this song has been played
(define HO1S-1 (make-1song-history 123456 "Light" 0))
(define HO1S-2 (make-1song-history 654321 "abc" 5))
#; (define (ho1s-temp h1)
     (... (1song-history-id h1) ...
          (1song-history-name h1) ...
          (1song-history-plays h1) ...))

;; A History is a [List-of HO1S]
;; represents the all song's history
(define HISTORY-0 '())
(define HISTORY (list HO1S-1 HO1S-2))
#; (define (history-tmep h)
     (cond
       [(empty? h) ...]
       [(cons? h) ... (ho1s-temp (first h)) ...
                  (history-tmep (rest h) ...)]))

#|------------- MusicPlayer -------------|#
;; song-chosen is one of:
;; - #f (represent there is no song chosen
;; Nat (represent the id of chosen song)
(define-struct musicplayer [status feedback history song-chosen])
;; A musicplayer is a (make-musicplayer Status FeedbackString History [List-of Number] Number)
;; where status represents the status of the program
;; feedback is the feedback string to display to the user
;; history represents the hisotory of played music
;; song-chosen is id of a song which currently choose
(define MP-1 (make-musicplayer STATUS-1 "" '() #f))
(define MP-2 (make-musicplayer STATUS-2 BAD-FB '() 1))
(define MP-3 (make-musicplayer STATUS-3 GOOD-FB HISTORY 1))
(define MP-4 (make-musicplayer STATUS-4 NO-FB HISTORY 0))
#; (define (musicplayer-temp mp)
     (... (musicplayer-status mp)
          (musicplayer-feedback mp) ...
          (musicplayer-history mp) ...
          (musicplayer-song-chosen mp) ...))



#|------------- CONSTANT -------------|#
(define FILEPATH "history.csv")
(define BG (empty-scene 1000 500))
(define NO-FB-TEXT "No feedback provided on the last song.")
(define INSTRUCTIONS "Use up and down arrow to choose songs and Click space to start playing a song.")
(define TEXT-SIZE 20)
(define ARROW (rotate 150 (triangle 15 "solid" "blue")))

#|------------- BIG BANG -------------|#
;; main/player : Any -> MusicPlayer
;; creates a musicplayer that keeps track of song history 
#;(define (main/player _)
    ; (save-history FILEPATH
    (big-bang ;(read-history FILEPATH)
        [to-draw draw-playlist-history-feedback]
      [on-key choose-song-request-song]
      [on-tick request-playlist]
      [on-receive receive-message]
      [register "dictionary.ccs.neu.edu"]
      [port 10001]))

#|------------- Save & Read File -------------|#

#|--------- TO-DRAW ---------|#
;; draw-playlist-history-feedback : MusicPlayer -> Image
;; Draw the current state of the world
(define (draw-playlist-history-feedback mp)
  (cond 
    [(and (string? (musicplayer-status mp))
          (string=? "Waiting for song data" (musicplayer-status mp)))
     (overlay (text "Waiting for song data" "black" TEXT-SIZE) BG)]
    [(list? (musicplayer-status mp)) (draw-playlist mp)]))
; [(and (string? (musicplayer-status mp))
;      (string=? "Requesting song" (musicplayer-status mp))) ...]
;[(song? (musicplayer-status mp)) (song-temp (musicplayer-status mp)) ...]))

;; draw-playlist : MusicPlayer -> Image

(define (draw-playlist mp)
  (local [;; draw-one-song : IDMetaPair Image -> Image
          ;; draw information of one song and combined all songs together
          (define (draw-one-song one-idpair sofar)
            (above (if (is-chosen? mp)
                       (beside ARROW
                               (text (number->string (first one-idpair)) TEXT-SIZE "black")
                               (text (first (second one-idpair)) "black" TEXT-SIZE)
                               (draw-playcount one-idpair (musicplayer-history mp)))
                       (beside (text (number->string (first one-idpair)) TEXT-SIZE "black" )
                               (text (first (second one-idpair)) TEXT-SIZE  "black")
                               (draw-playcount one-idpair (musicplayer-history mp))))
                   sofar))]
    (foldr draw-one-song empty-image (musicplayer-status mp))))

;; is-chosen? : MusicPlayer -> Boolean
(define (is-chosen? mp)
  (= (musicplayer-song-chosen mp) (first (first (musicplayer-status mp)))))

;; draw-playcount : IDMetaPair History -> Image
;; Draw the history of song has been played on canvas
(define (draw-playcount one-idpair h)
  (cond
    [(empty? h) (text "0" TEXT-SIZE "black")]
    [(cons? h)
     (if (record-in-file? one-idpair h)
         (if (= (1song-history-id (first h)) (first one-idpair))
             (text (number->string (1song-history-plays (first h))) "black" TEXT-SIZE)
             (draw-playcount one-idpair (rest h)))
         (text "0" TEXT-SIZE "black"))]))

;; record-in-file?
(define (record-in-file? one-idpair h)
  (local [;;
          (define (any-same-id? ho1s)
            (= (1song-history-id h) (first one-idpair)))]
    (ormap any-same-id? h)))

#|--------- ON-KEY ---------|#
;; choose-song : MusicPlayer KeyEvent -> MusicPlayer
;; the user can use the arrow keys (up/down) to tab through the songs available and then use
;; enter (KeyEvent "\r") to send a request to the server to get the SongMsg for that song.
;; Once the songâ€™s information has been downloaded, the user can press " " to play the song as before.
#;(define (choose-song mp ke)
    (cond
      [(and (list? (musicplayer-status mp)) (key=? ke "up")) ...]
      [(and (list? (musicplayer-status mp)) (key=? ke "down")) ...]
      [(and (list? (musicplayer-status mp)) (key=? ke "\r")) send-request]
      [(and (list? (musicplayer-status mp)) (key=? ke " "))   play-sound              ]
      [else mp]))
#|--------- ON-TICK ---------|#
#|--------- ON-RECEIVE ---------|#
;; receive-message : MusicPlayer ServerMsg -> PlayerResult
;; deal with the package from server to receive a new song
;; and play it or a playlist that user can choose
(check-expect (receive-message MP-1 SMSG-1) MP-1)
(check-expect (receive-message MP-2 SMSG-2)
              (make-musicplayer (make-song 123456 "Light" "Rocket Gilrs" #"bytes") "dislike" '() 1))
(check-expect (receive-message MP-3 SMSG-3)
              (make-musicplayer (second SMSG-3) "like"
                                (list
                                 (make-1song-history 123456 "Light" 0)
                                 (make-1song-history 654321 "abc" 5)) 1))
                                
(define (receive-message aplayer smg)
  (cond
    [(string=? "ERROR" (first smg)) aplayer]
    [(string=? "METADATA" (first smg)) (make-musicplayer
                                        (second smg)
                                        (musicplayer-feedback aplayer)
                                        (musicplayer-history aplayer)
                                        (musicplayer-song-chosen aplayer))]
    [(string=? "SONG" (first smg)) (make-musicplayer
                                    (make-song (second smg)
                                               (first (third smg))
                                               (second (third smg))
                                               (fourth smg))
                                    (musicplayer-feedback aplayer)
                                    (musicplayer-history aplayer)
                                    (musicplayer-song-chosen aplayer))]))